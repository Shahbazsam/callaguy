openapi: 3.0.3
info:
  title: Application API
  description: API for managing services, authentication, payments, and support
  version: 1.0.0
servers:
  - url: http://127.0.0.1:8081
tags:
  - name: Customer Authentication
    description: Customer authentication operations
  - name: Professional Authentication
    description: Professional authentication operations
  - name: Admin Authentication
    description: Admin authentication operations
  - name: Customer Profile
    description: Customer profile management
  - name: Professional Profile
    description: Professional profile management
  - name: Services
    description: Service catalog management
  - name: Service Requests
    description: Service request management
  - name: Payment
    description: Payment processing operations
  - name: Support Tickets
    description: Support ticket management
  - name: Support Messages
    description: Support message management

paths:
  # Customer Authentication
  /customer_auth/register:
    post:
      tags: [Customer Authentication]
      summary: Register a new customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Registration successful
          content:
            text/plain:
              schema:
                type: string
                example: "Registration Successful"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /customer_auth/login:
    post:
      tags: [Customer Authentication]
      summary: Customer login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Professional Authentication
  /professional_auth/register:
    post:
      tags: [Professional Authentication]
      summary: Register a new professional
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfessionalRegisterRequest'
      responses:
        '200':
          description: Registration successful
          content:
            text/plain:
              schema:
                type: string
                example: "Registration Successful"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /professional_auth/login:
    post:
      tags: [Professional Authentication]
      summary: Professional login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Admin Authentication
  /admin_auth/register:
    post:
      tags: [Admin Authentication]
      summary: Register a new admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminRegisterRequestDto'
      responses:
        '200':
          description: Registration successful
          content:
            text/plain:
              schema:
                type: string
                example: "Registration Successful"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin_auth/login:
    post:
      tags: [Admin Authentication]
      summary: Admin login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Customer Profile
  /customer_profile:
    get:
      tags: [Customer Profile]
      security:
        - bearerAuth: []
      summary: Get customer profile information
      responses:
        '200':
          description: Profile information retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerProfileResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /customer_profile_picture:
    post:
      tags: [Customer Profile]
      security:
        - bearerAuth: []
      summary: Upload customer profile picture
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Profile picture updated
          content:
            text/plain:
              schema:
                type: string
                example: "Updated Successfully"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Professional Profile
  /professional_profile:
    get:
      tags: [Professional Profile]
      security:
        - bearerAuth: []
      summary: Get professional profile information
      responses:
        '200':
          description: Profile information retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfessionalProfileResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /professional_profile_picture:
    post:
      tags: [Professional Profile]
      security:
        - bearerAuth: []
      summary: Upload professional profile picture
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Profile picture updated
          content:
            text/plain:
              schema:
                type: string
                example: "Updated Successfully"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Services
  /services:
    get:
      tags: [Services]
      security:
        - bearerAuth: []
      summary: Get all services
      responses:
        '200':
          description: Services retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /services/{id}:
    get:
      tags: [Services]
      security:
        - bearerAuth: []
      summary: Get subservices by service ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Subservices retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubServiceResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Service Requests
  /customer_service_request/create:
    post:
      tags: [Service Requests]
      security:
        - bearerAuth: []
      summary: Create a service request
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateServiceRequestDto'
      responses:
        '200':
          description: Service request created
          content:
            text/plain:
              schema:
                type: string
                example: "Service Request Created Successfully"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /customer_service_request:
    get:
      tags: [Service Requests]
      security:
        - bearerAuth: []
      summary: Get all service requests for customer
      responses:
        '200':
          description: Service requests retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseServiceRequestEntityDto'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /customer_service_request/{id}:
    get:
      tags: [Service Requests]
      security:
        - bearerAuth: []
      summary: Get service request by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Service request retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseServiceRequestEntityDto'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /professional_service_request:
    get:
      tags: [Service Requests]
      security:
        - bearerAuth: []
      summary: Get all service requests for professional
      responses:
        '200':
          description: Service requests retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseServiceRequestEntityDto'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /professional_service_request/accept:
    post:
      tags: [Service Requests]
      security:
        - bearerAuth: []
      summary: Accept a service request
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AcceptServiceRequestDto'
      responses:
        '200':
          description: Service request accepted
          content:
            text/plain:
              schema:
                type: string
                example: "Accepted"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /professional_service_request/updateStatus:
    post:
      tags: [Service Requests]
      security:
        - bearerAuth: []
      summary: Update service request status
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateServiceRequestDto'
      responses:
        '200':
          description: Status updated
          content:
            text/plain:
              schema:
                type: string
                example: "Status updated Successfully"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /professional_service_request/{id}:
    get:
      tags: [Service Requests]
      security:
        - bearerAuth: []
      summary: Get service request by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Service request retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseServiceRequestEntityDto'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Payment
  /payment/make_payment:
    post:
      tags: [Payment]
      security:
        - bearerAuth: []
      summary: Make a payment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitialPaymentRequestDto'
      responses:
        '200':
          description: Payment successful
          content:
            text/plain:
              schema:
                type: string
                example: "Payment Successful"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /payment/payment_information/{id}:
    get:
      tags: [Payment]
      security:
        - bearerAuth: []
      summary: Get payment information by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Payment information retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResponseDto'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /payment/{id}/status:
    put:
      tags: [Payment]
      security:
        - bearerAuth: []
      summary: Update payment status
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Payment status updated
          content:
            text/plain:
              schema:
                type: string
                example: "Payment Status Updated Successfully"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Support Tickets
  /supportTicket/create:
    post:
      tags: [Support Tickets]
      security:
        - bearerAuth: []
      summary: Create a support ticket
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SupportTicketRequestDto'
      responses:
        '200':
          description: Ticket created
          content:
            text/plain:
              schema:
                type: string
                example: "Support Ticket Created Successfully"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /supportTicket/customer_tickets:
    get:
      tags: [Support Tickets]
      security:
        - bearerAuth: []
      summary: Get all tickets for customer
      responses:
        '200':
          description: Tickets retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SupportTicketResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /supportTicket/update_status:
    post:
      tags: [Support Tickets]
      security:
        - bearerAuth: []
      summary: Update ticket status
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTicketStatusRequestDto'
      responses:
        '200':
          description: Status updated
          content:
            text/plain:
              schema:
                type: string
                example: "Status Updated Successfully"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /supportTicket/all_tickets:
    get:
      tags: [Support Tickets]
      security:
        - bearerAuth: []
      summary: Get all tickets (admin only)
      responses:
        '200':
          description: Tickets retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SupportTicketResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Support Messages
  /support_messages/create:
    post:
      tags: [Support Messages]
      security:
        - bearerAuth: []
      summary: Create a support message
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SupportMessageRequestDto'
      responses:
        '200':
          description: Message created
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /support_messages/{id}:
    get:
      tags: [Support Messages]
      security:
        - bearerAuth: []
      summary: Get messages by ticket ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Messages retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SupportMessageResponseDto'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Authentication Schemas
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          example: "user@example.com"
        password:
          type: string
          example: "password123"
      required: [email, password]

    RegisterRequest:
      type: object
      properties:
        userName:
          type: string
          example: "john_doe"
        email:
          type: string
          example: "john@example.com"
        password:
          type: string
          example: "password123"
        userType:
          type: string
          example: "customer"
        phone:
          type: string
          example: "+1234567890"
        address:
          type: string
          example: "123 Main St"
      required: [userName, email, password, userType, phone, address]

    ProfessionalRegisterRequest:
      type: object
      properties:
        userName:
          type: string
          example: "pro_john"
        email:
          type: string
          example: "pro@example.com"
        password:
          type: string
          example: "password123"
        experience:
          type: integer
          example: 5
        documents:
          type: string
          format: byte
          example: "base64encodedstring"
        serviceId:
          type: array
          items:
            type: integer
          example: [1, 2]
      required: [userName, email, password, experience, documents, serviceId]

    AdminRegisterRequestDto:
      type: object
      properties:
        userName:
          type: string
          example: "admin_user"
        email:
          type: string
          example: "admin@example.com"
        password:
          type: string
          example: "admin123"
      required: [userName, email, password]

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      required: [token]

    # Profile Schemas
    CustomerProfileResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        userName:
          type: string
          example: "john_doe"
        email:
          type: string
          example: "john@example.com"
        phone:
          type: string
          example: "+1234567890"
        address:
          type: string
          example: "123 Main St"
        profilePicture:
          type: string
          example: "http://example.com/profile.jpg"
        createdAt:
          type: string
          format: date-time
          example: "2023-01-01T12:00:00Z"

    ProfessionalProfileResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        userName:
          type: string
          example: "pro_john"
        email:
          type: string
          example: "pro@example.com"
        experience:
          type: integer
          example: 5
        services:
          type: array
          items:
            type: string
          example: ["Cleaning", "Plumbing"]
        profilePicture:
          type: string
          example: "http://example.com/profile.jpg"
        documents:
          type: string
          example: "http://example.com/documents.pdf"
        createdAt:
          type: string
          format: date-time
          example: "2023-01-01T12:00:00Z"

    # Service Schemas
    ServiceResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Cleaning"
        description:
          type: string
          example: "Home cleaning services"

    SubServiceResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Deep Cleaning"
        basePrice:
          type: string
          format: decimal
          example: "80.00"
        visitCharge:
          type: string
          format: decimal
          example: "20.00"

    # Service Request Schemas
    CreateServiceRequestDto:
      type: object
      properties:
        subServiceId:
          type: integer
          example: 1
        preferredDate:
          type: string
          format: date
          example: "2023-12-31"
        preferredTime:
          type: string
          format: time
          example: "14:30:00"
        address:
          type: string
          example: "123 Main St"
        specialInstructions:
          type: string
          example: "Please ring the bell twice"
      required: [subServiceId, preferredDate, preferredTime, address]

    AcceptServiceRequestDto:
      type: object
      properties:
        requestId:
          type: integer
          example: 1
      required: [requestId]

    UpdateServiceRequestDto:
      type: object
      properties:
        requestId:
          type: integer
          example: 1
        newStatus:
          $ref: '#/components/schemas/ServiceRequestStatus'
      required: [requestId, newStatus]

    ResponseServiceRequestEntityDto:
      type: object
      properties:
        id:
          type: integer
          example: 1
        customerId:
          type: integer
          example: 1
        professionalId:
          type: integer
          example: 2
        amount:
          type: string
          format: decimal
          example: "100.50"
        subService:
          type: string
          example: "Deep Cleaning"
        subServiceId:
          type: integer
          example: 1
        status:
          $ref: '#/components/schemas/ServiceRequestStatus'
        preferredDate:
          type: string
          format: date
          example: "2023-12-31"
        preferredTime:
          type: string
          format: time
          example: "14:30:00"
        address:
          type: string
          example: "123 Main St"
        specialInstructions:
          type: string
          example: "Please ring the bell twice"
        createdAt:
          type: string
          format: date-time
          example: "2023-01-01T11:30:00Z"

    # Payment Schemas
    InitialPaymentRequestDto:
      type: object
      properties:
        serviceRequestId:
          type: integer
          example: 1
        amount:
          type: string
          format: decimal
          example: "100.50"
      required: [serviceRequestId, amount]

    PaymentResponseDto:
      type: object
      properties:
        id:
          type: integer
          example: 1
        amount:
          type: string
          format: decimal
          example: "100.50"
        status:
          $ref: '#/components/schemas/PaymentStatus'
        paymentDate:
          type: string
          format: date-time
          example: "2023-01-01T12:00:00Z"
        createdAt:
          type: string
          format: date-time
          example: "2023-01-01T11:30:00Z"

    # Support Ticket Schemas
    SupportTicketRequestDto:
      type: object
      properties:
        serviceRequestId:
          type: integer
          example: 1
        issueType:
          type: string
          example: "Payment issue"
      required: [serviceRequestId, issueType]

    UpdateTicketStatusRequestDto:
      type: object
      properties:
        ticketId:
          type: integer
          example: 1
        status:
          type: boolean
          example: true
      required: [ticketId]

    SupportTicketResponse:
      type: object
      properties:
        customerId:
          type: integer
          example: 1
        serviceRequestId:
          type: integer
          example: 1
        issueType:
          type: string
          example: "Payment issue"
        status:
          $ref: '#/components/schemas/SupportTicketStatus'
        createdAt:
          type: string
          format: date-time
          example: "2023-01-01T11:30:00Z"

    # Support Message Schemas
    SupportMessageRequestDto:
      type: object
      properties:
        ticketId:
          type: integer
          example: 1
        message:
          type: string
          example: "I need help with my service request"
      required: [ticketId, message]

    SupportMessageResponseDto:
      type: object
      properties:
        ticketId:
          type: integer
          example: 1
        sender:
          $ref: '#/components/schemas/SupportMessageSender'
        message:
          type: string
          example: "I need help with my service request"
        createdAt:
          type: string
          format: date-time
          example: "2023-01-01T11:30:00Z"

    # Enums
    ServiceRequestStatus:
      type: string
      enum: [PENDING, ACCEPTED, IN_PROGRESS, COMPLETED, CANCELLED]
      example: "PENDING"

    PaymentStatus:
      type: string
      enum: [PENDING, SUCCESSFUL, FAILED]
      example: "SUCCESSFUL"

    SupportTicketStatus:
      type: string
      enum: [OPEN, CLOSED]
      example: "OPEN"

    SupportMessageSender:
      type: string
      enum: [CUSTOMER, ADMIN]
      example: "CUSTOMER"

    # Error Schema
    ErrorResponse:
      type: object
      properties:
        code:
          type: string
          example: "INTERNAL_ERROR"
        message:
          type: string
          example: "An unexpected error occurred"